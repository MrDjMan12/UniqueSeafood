@page "/bookings/delete-booking"
@using Microsoft.EntityFrameworkCore
@using UniqueSeafood.Models
@inject IDbContextFactory<UniqueSeafood.Data.UniqueSeafoodContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<!--Delete a booking record chosen by the user-->

<PageTitle>Delete Booking</PageTitle>

<h1>Delete Booking</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <hr />
    <!--If Booking record is not found, it will be loading. Otherwise if found, the record will be shown in order for the user to decide whether to delete record or not-->
    @if (booking is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title:</dt>
            <dd class="col-sm-10">@booking.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">First Name:</dt>
            <dd class="col-sm-10">@booking.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Last Name:</dt>
            <dd class="col-sm-10">@booking.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Number Of Guests:</dt>
            <dd class="col-sm-10">@booking.NumberOfGuests</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Contact Number:</dt>
            <dd class="col-sm-10">@booking.ContactNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email Address:</dt>
            <dd class="col-sm-10">@booking.EmailAddress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Special Request:</dt>
            <dd class="col-sm-10">@booking.SpecialRequest</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Booking Date:</dt>
            <dd class="col-sm-10">@booking.BookingDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Booking Time:</dt>
            <dd class="col-sm-10">@booking.BookingTime</dd>
        </dl>
        <EditForm method="post" Model="booking" OnValidSubmit="DeleteTheBooking" FormName="delete" Enhance>
            <a class="btn btn-primary" href="@($"/bookings")">Back</a> |
            <button type="submit" class="btn btn-danger" disabled="@(booking is null)">Delete</button> 
        </EditForm>
    }
</div>

@code {
    private Booking? booking;

    [SupplyParameterFromQuery]
    private int Id { get; set; }
    //To find the record chosen by the user. Utilises Async mode to achieve this
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        booking = await context.Booking.FirstOrDefaultAsync(m => m.Id == Id);

        if (booking is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    //Deletes the booking from the database, save these changes and redirects user back to list of bookings
    private async Task DeleteTheBooking()
    {
        using var context = DbFactory.CreateDbContext();
        context.Booking.Remove(booking!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");
    }
}
